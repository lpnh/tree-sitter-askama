================================================================================
attr
================================================================================

{{ inner.a }}

--------------------------------------------------------------------------------

(source
  (content)
  (render_expression
    (field_access_expression
      (identifier)
      (identifier)))
  (content))

================================================================================
base
================================================================================

{{ title }}
{% block content %}{% endblock %}
{% block foo %}Foo{% endblock %}
Copyright 2017

--------------------------------------------------------------------------------

(source
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (block_statement
      (identifier)))
  (control_tag
    (endblock_statement))
  (content)
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (control_tag
    (endblock_statement))
  (content))

================================================================================
big-table
================================================================================

<table>
{% for row in table %}
<tr>{% for col in row %}<td>{{ col|escape }}</td>{% endfor %}</tr>
{% endfor %}
</table>

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (for_statement
      (identifier)
      (identifier)))
  (content)
  (control_tag
    (for_statement
      (identifier)
      (identifier)))
  (content)
  (render_expression
    (filter_expression
      (identifier)
      (filter_chain
        (filter
          (identifier)))))
  (content)
  (control_tag
    (endfor_statement))
  (content)
  (control_tag
    (endfor_statement))
  (content))

================================================================================
block_in_include_base
================================================================================

{%- block block_in_base -%}
    block_in_base: from base!
{% endblock -%}

{%- include "block_in_include_partial.html" -%}

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (control_tag
    (endblock_statement))
  (content)
  (control_tag
    (include_statement
      (string_literal)))
  (content))

================================================================================
blocks
================================================================================

{% block index %}
Section: {{ s1 }}
{% endblock %}

{% block section -%}
  [
  {%- for value in  values -%}
    {{ value }}
  {%- endfor -%}
  ]
{%- endblock %}

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (endblock_statement))
  (content)
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (control_tag
    (for_statement
      (identifier)
      (identifier)))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (endfor_statement))
  (content)
  (control_tag
    (endblock_statement))
  (content))

================================================================================
child
================================================================================

{% extends "base.html" %}
{% block content %}({{ title }}) Content goes here{% endblock content %}

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (extends_statement
      (string_literal)))
  (content)
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (endblock_statement
      (identifier)))
  (content))

================================================================================
deep-base
================================================================================

{% import "macro.html" as libb %}
<html>
  <head>
  {% block head %}
    <style></style>
  {% endblock %}
  </head>
  <body>
  {% block body %}
    {% call libb::thrice("nav") %}{% endcall %}
    Copyright {{ year }}
  {% endblock %}
  </body>
</html>

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (import_statement
      (string_literal)
      (identifier)))
  (content)
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (control_tag
    (endblock_statement))
  (content)
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (control_tag
    (macro_call_statement
      (call_expression
        (path_expression
          (identifier)
          (identifier))
        (arguments
          (string_literal)))))
  (control_tag
    (endcall_statement))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (endblock_statement))
  (content))

================================================================================
else
================================================================================

{% if cond %}true{% else %}false{% endif %}

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (conditional_statement
      (identifier)))
  (content)
  (control_tag
    (conditional_statement))
  (content)
  (control_tag
    (conditional_statement))
  (content))

================================================================================
else-if
================================================================================

{% if cond %}true{% else if check %}checked{% else %}false{% endif %}

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (conditional_statement
      (identifier)))
  (content)
  (control_tag
    (conditional_statement
      (identifier)))
  (content)
  (control_tag
    (conditional_statement))
  (content)
  (control_tag
    (conditional_statement))
  (content))

================================================================================
extend_and_import
================================================================================

{% import "macro.html" as m1 %}

{% block header %}{% endblock %}

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (import_statement
      (string_literal)
      (identifier)))
  (content)
  (control_tag
    (block_statement
      (identifier)))
  (control_tag
    (endblock_statement))
  (content))

================================================================================
filters
================================================================================

{{ strvar|e }}

--------------------------------------------------------------------------------

(source
  (content)
  (render_expression
    (filter_expression
      (identifier)
      (filter_chain
        (filter
          (identifier)))))
  (content))

================================================================================
filters_join
================================================================================

{{ s|join(", ") }}

--------------------------------------------------------------------------------

(source
  (content)
  (render_expression
    (filter_expression
      (identifier)
      (filter_chain
        (filter
          (identifier)
          (filter_arguments
            (string_literal))))))
  (content))

================================================================================
for
================================================================================

{% for s in strings %}
  {{- loop.index0 }}. {{ s }}{% if loop.first %} (first){% endif %}
{% endfor %}
{% for (s1, s2, ) in tuple_strings %}
  {{- loop.index0 }}. {{ s1 }},{{ s2 }}{% if loop.first %} (first){% endif %}
{% endfor %}

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (for_statement
      (identifier)
      (identifier)))
  (content)
  (render_expression
    (field_access_expression
     (identifier)
     (identifier)))
  (content)
  (render_expression
    (identifier))
  (control_tag
    (conditional_statement
      (field_access_expression
        (identifier)
        (identifier))))
  (content)
  (control_tag
    (conditional_statement))
  (content)
  (control_tag
    (endfor_statement))
  (content)
  (control_tag
    (for_statement
      (tuple_pattern
        (identifier)
        (identifier))
      (identifier)))
  (content)
  (render_expression
    (field_access_expression
      (identifier)
      (identifier)))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (control_tag
    (conditional_statement
      (field_access_expression
        (identifier)
        (identifier))))
  (content)
  (control_tag
    (conditional_statement))
  (content)
  (control_tag
    (endfor_statement))
  (content))

================================================================================
format
================================================================================

{{ "{:?}"|format(var) }}

--------------------------------------------------------------------------------

(source
  (content)
  (render_expression
    (filter_expression
      (string_literal)
      (filter_chain
        (filter
          (identifier)
          (filter_arguments
            (identifier))))))
  (content))

================================================================================
if
================================================================================

{% if cond %}true{% endif %}

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (conditional_statement
      (identifier)))
  (content)
  (control_tag
    (conditional_statement))
  (content))

================================================================================
let
================================================================================

{% let v = s %}{{ v }}
{% let (v1,v2) = t %}{{ v1 }}{{ v2 }}

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (let_statement
      (identifier)
      (identifier)))
  (render_expression
    (identifier))
  (content)
  (control_tag
    (let_statement
      (tuple_pattern
        (identifier)
        (identifier))
      (identifier)))
  (render_expression
    (identifier))
  (render_expression
    (identifier))
  (content))

================================================================================
macro
================================================================================

1

{%- macro thrice(param) -%}

{{ param }} {{ param }} {{ param }}

{%- endmacro -%}

2

{%- call thrice(s) -%}{%- endcall -%}

3

{%- macro twice(param) -%}

{{ param }} {{ param }}

{%- endmacro twice -%}

4

{%- call twice(s) -%}{%- endcall -%}

5

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (macro_statement
      (identifier)
      (identifier)))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (endmacro_statement))
  (content)
  (control_tag
    (macro_call_statement
      (call_expression
        (identifier)
        (arguments
          (identifier)))))
  (control_tag
    (endcall_statement))
  (content)
  (control_tag
    (macro_statement
      (identifier)
      (identifier)))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (endmacro_statement
      (identifier)))
  (content)
  (control_tag
    (macro_call_statement
      (call_expression
        (identifier)
        (arguments
          (identifier)))))
  (control_tag
    (endcall_statement))
  (content))

================================================================================
macro-import-callexpr
================================================================================

{% import "nested-macro-callexpr.html" as otherscope %}

{% macro intermediate() %}
    {{- otherscope::parent() -}}
{% endmacro %}

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (import_statement
      (string_literal)
      (identifier)))
  (content)
  (control_tag
    (macro_statement
      (identifier)))
  (content)
  (render_expression
    (call_expression
      (path_expression
        (identifier)
        (identifier))
      (arguments)))
  (content)
  (control_tag
    (endmacro_statement))
  (content))

================================================================================
match-literal-num
================================================================================

{% match item %}
{% when 42 %}
Found answer to everything
{% else %}
Else found {{item}}
{% endmatch %}

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (match_statement
      (identifier)))
  (content)
  (control_tag
    (when_statement
      (pattern
        (number_literal))))
  (content)
  (control_tag
    (conditional_statement))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (endmatch_statement))
  (content))

================================================================================
match-no-ws
================================================================================

{% match foo %}{% when Some with (bar) %}{{ bar }}{% when None %}{% endmatch %}

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (match_statement
      (identifier)))
  (control_tag
    (when_statement
      (pattern
        (identifier))
      (pattern_destructure
        (destructure_element
          (identifier)))))
  (render_expression
    (identifier))
  (control_tag
    (when_statement
      (pattern
        (identifier))))
  (control_tag
    (endmatch_statement))
  (content))

================================================================================
match-opt
================================================================================

{% match item %}
{% when Some with ("foo") %}
Found literal foo
{% when Some with (val) %}
Found {{val}}
{% when None %}
Not Found
{% endmatch %}

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (match_statement
      (identifier)))
  (content)
  (control_tag
    (when_statement
      (pattern
        (identifier))
      (pattern_destructure
        (destructure_element
          (string_literal)))))
  (content)
  (control_tag
    (when_statement
      (pattern
        (identifier))
      (pattern_destructure
        (destructure_element
          (identifier)))))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (when_statement
      (pattern
        (identifier))))
  (content)
  (control_tag
    (endmatch_statement))
  (content))

================================================================================
option
================================================================================

{% if var.is_some() -%}
  some: {{ var.unwrap() }}
{%- else -%}
  none
{%- endif %}

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (conditional_statement
      (call_expression
        (field_access_expression
          (identifier)
          (identifier))
        (arguments))))
  (content)
  (render_expression
    (call_expression
      (field_access_expression
        (identifier)
        (identifier))
      (arguments)))
  (content)
  (control_tag
    (conditional_statement))
  (content)
  (control_tag
    (conditional_statement))
  (content))

================================================================================
rust-macros-full-path
================================================================================

Hello, {{ foo::hello2!() }}!

--------------------------------------------------------------------------------

(source
  (content)
  (render_expression
    (call_expression
      (path_expression
        (identifier)
        (identifier))
      (arguments)))
  (content))

================================================================================
simple
================================================================================

{# our very first test! #}
hello world, {{ strvar }}
with number: {{ num }}
Iñtërnâtiônàlizætiøn is important
in vars too: {{ i18n }}

--------------------------------------------------------------------------------

(source
  (content)
  (comment)
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content))

================================================================================
teams
================================================================================

<html>
  <head>
    <title>{{ year }}</title>
  </head>
  <body>
    <h1>CSL {{ year }}</h1>
    <ul>
    {% for team in teams %}
      <li class="{% if loop.index0 == 0 %}champion{% endif %}">
      <b>{{ team.name }}</b>: {{ team.score }}
      </li>
    {% endfor %}
    </ul>
  </body>
</html>

--------------------------------------------------------------------------------

(source
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (for_statement
      (identifier)
      (identifier)))
  (content)
  (control_tag
    (conditional_statement
      (binary_expression
        (field_access_expression
          (identifier)
          (identifier))
        (number_literal))))
  (content)
  (control_tag
    (conditional_statement))
  (content)
  (render_expression
    (field_access_expression
      (identifier)
      (identifier)))
  (content)
  (render_expression
    (field_access_expression
      (identifier)
      (identifier)))
  (content)
  (control_tag
    (endfor_statement))
  (content))


================================================================================
tuple-attr
================================================================================

{{ tuple.0 }}{{ tuple.1 }}

--------------------------------------------------------------------------------

(source
  (content)
  (render_expression
    (field_access_expression
      (identifier)
      (number_literal)))
  (render_expression
    (field_access_expression
      (identifier)
      (number_literal)))
  (content))
