================================================================================
allow-whitespaces
================================================================================

{{ tuple.0 }}
{{ tuple .1 }}
{{ tuple. 2 }}
{{ tuple . 3 }}
{% let ( t0 , t1 , t2 , t3 , ) = tuple %}

{{ string }}
{{ string.len( ) }}
{{ string . len () }}
{{ string . len () }}
{{ string. len () }}
{{ string . len ( ) }}

{{ nested_1 . nested_2 . array [0] }}
{{ nested_1 .nested_2. array [ 1 ] }}
{{ nested_1 .nested_2. hash [ "key" ] }}

{% let array = nested_1.nested_2.array %}
{#
{% let array = nested_1.nested_2.array %}
{% let array = nested_1 . nested_2 . array %}
#}
{#
{% let hash = &nested_1.nested_2.hash %}
#}

{{ array| json(2) }}
{{ array[..]| json(2) }}{{ array [ .. ]| json(2) }}
{{ array[1..2]| json(2) }}{{ array [ 1 .. 2 ]| json(2) }}
{{ array[1..=2]| json(2) }}{{ array [ 1 ..= 2 ]| json(2) }}
{{ array[(0+1)..(3-1)]| json(2) }}{{ array [ ( 0 + 1 ) .. ( 3 - 1 ) ]| json(2) }}

{{-1}}{{ -1 }}{{ - 1 }}
{{1+2}}{{ 1+2 }}{{ 1 +2 }}{{ 1+ 2 }} {{ 1 + 2 }}
{{1*2}}{{ 1*2 }}{{ 1 *2 }}{{ 1* 2 }} {{ 1 * 2 }}
{{1 bitand 2}}{{ 1 bitand 2 }}{{ 1 bitand 2 }}{{ 1 bitand 2 }} {{ 1 bitand 2 }}
{{1 bitor 2}}{{ 1 bitor 2 }}{{ 1 bitor 2}}{{1 bitor 2 }} {{1			bitor			2}}

{{true}}{{false}}
{{!true}}{{ !true }}{{ ! true }}
{#
{{true&&false}}{{ true&&false }}{{ true &&false }}{{ true&& false }} {{ true && false }}
{{true||false}}{{ true||false }}{{ true ||false }}{{ true|| false }} {{ true || false }}
#}

{{ self.f0() }}{{ self.f0 () }}{{ self.f0 ( ) }}
{{ self.f1("1") }}{{ self.f1 ( "1" ) }}{{ self.f1 ( "1" ) }}
{{ self.f2("1","2") }}{{ self.f2 ( "1" ,"2" ) }}{{ self.f2 ( "1" , "2" ) }}

{% for s in 0..5 %}{% endfor %}
{% for s in 0 .. 5 %}{% endfor %}

{% match option %}
{% when Option :: Some with ( option ) %}
{% when std :: option :: Option :: None %}
{% endmatch %}

{{ std::string::String::new () }}
{#
{{ ::std::string::String::new () }}
#}

--------------------------------------------------------------------------------

(source
  (render_expression
    (field_expression
      (identifier)
      (number_literal)))
  (render_expression
    (field_expression
      (identifier)
      (number_literal)))
  (render_expression
    (field_expression
      (identifier)
      (number_literal)))
  (render_expression
    (field_expression
      (identifier)
      (number_literal)))
  (control_tag
    (let_statement
      (tuple_pattern
        (identifier)
        (identifier)
        (identifier)
        (identifier))
      (identifier)))
  (render_expression
    (identifier))
  (render_expression
    (call_expression
      (field_expression
        (identifier)
        (field_identifier))
      (arguments)))
  (render_expression
    (call_expression
      (field_expression
        (identifier)
        (field_identifier))
      (arguments)))
  (render_expression
    (call_expression
      (field_expression
        (identifier)
        (field_identifier))
      (arguments)))
  (render_expression
    (call_expression
      (field_expression
        (identifier)
        (field_identifier))
      (arguments)))
  (render_expression
    (call_expression
      (field_expression
        (identifier)
        (field_identifier))
      (arguments)))
  (render_expression
    (index_expression
      (field_expression
        (field_expression
          (identifier)
          (field_identifier))
        (field_identifier))
      (number_literal)))
  (render_expression
    (index_expression
      (field_expression
        (field_expression
          (identifier)
          (field_identifier))
        (field_identifier))
      (number_literal)))
  (render_expression
    (index_expression
      (field_expression
        (field_expression
          (identifier)
          (field_identifier))
        (field_identifier))
      (string_literal)))
  (control_tag
    (let_statement
      (identifier)
      (field_expression
        (field_expression
          (identifier)
          (field_identifier))
        (field_identifier))))
  (comment)
  (comment)
  (render_expression
    (filter_expression
      (identifier)
      (identifier)
      (arguments
        (number_literal))))
  (render_expression
    (filter_expression
      (index_expression
        (identifier)
        (range_expression))
      (identifier)
      (arguments
        (number_literal))))
  (render_expression
    (filter_expression
      (index_expression
        (identifier)
        (range_expression))
      (identifier)
      (arguments
        (number_literal))))
  (render_expression
    (filter_expression
      (index_expression
        (identifier)
        (range_expression
          (number_literal)
          (number_literal)))
      (identifier)
      (arguments
        (number_literal))))
  (render_expression
    (filter_expression
      (index_expression
        (identifier)
        (range_expression
          (number_literal)
          (number_literal)))
      (identifier)
      (arguments
        (number_literal))))
  (render_expression
    (filter_expression
      (index_expression
        (identifier)
        (range_expression
          (number_literal)
          (number_literal)))
      (identifier)
      (arguments
        (number_literal))))
  (render_expression
    (filter_expression
      (index_expression
        (identifier)
        (range_expression
          (number_literal)
          (number_literal)))
      (identifier)
      (arguments
        (number_literal))))
  (render_expression
    (filter_expression
      (index_expression
        (identifier)
        (range_expression
          (parenthesized_expression
            (binary_expression
              (number_literal)
              (number_literal)))
          (parenthesized_expression
            (binary_expression
              (number_literal)
              (number_literal)))))
      (identifier)
      (arguments
        (number_literal))))
  (render_expression
    (filter_expression
      (index_expression
        (identifier)
        (range_expression
          (parenthesized_expression
            (binary_expression
              (number_literal)
              (number_literal)))
          (parenthesized_expression
            (binary_expression
              (number_literal)
              (number_literal)))))
      (identifier)
      (arguments
        (number_literal))))
  (render_expression
    (number_literal))
  (render_expression
    (number_literal))
  (render_expression
    (number_literal))
  (render_expression
    (binary_expression
      (number_literal)
      (number_literal)))
  (render_expression
    (binary_expression
      (number_literal)
      (number_literal)))
  (render_expression
    (binary_expression
      (number_literal)
      (number_literal)))
  (render_expression
    (binary_expression
      (number_literal)
      (number_literal)))
  (render_expression
    (binary_expression
      (number_literal)
      (number_literal)))
  (render_expression
    (binary_expression
      (number_literal)
      (number_literal)))
  (render_expression
    (binary_expression
      (number_literal)
      (number_literal)))
  (render_expression
    (binary_expression
      (number_literal)
      (number_literal)))
  (render_expression
    (binary_expression
      (number_literal)
      (number_literal)))
  (render_expression
    (binary_expression
      (number_literal)
      (number_literal)))
  (render_expression
    (binary_expression
      (number_literal)
      (number_literal)))
  (render_expression
    (binary_expression
      (number_literal)
      (number_literal)))
  (render_expression
    (binary_expression
      (number_literal)
      (number_literal)))
  (render_expression
    (binary_expression
      (number_literal)
      (number_literal)))
  (render_expression
    (binary_expression
      (number_literal)
      (number_literal)))
  (render_expression
    (binary_expression
      (number_literal)
      (number_literal)))
  (render_expression
    (binary_expression
      (number_literal)
      (number_literal)))
  (render_expression
    (binary_expression
      (number_literal)
      (number_literal)))
  (render_expression
    (binary_expression
      (number_literal)
      (number_literal)))
  (render_expression
    (binary_expression
      (number_literal)
      (number_literal)))
  (render_expression
    (boolean_literal))
  (render_expression
    (boolean_literal))
  (render_expression
    (unary_expression
      (boolean_literal)))
  (render_expression
    (unary_expression
      (boolean_literal)))
  (render_expression
    (unary_expression
      (boolean_literal)))
  (comment)
  (render_expression
    (call_expression
      (field_expression
        (identifier)
        (field_identifier))
      (arguments)))
  (render_expression
    (call_expression
      (field_expression
        (identifier)
        (field_identifier))
      (arguments)))
  (render_expression
    (call_expression
      (field_expression
        (identifier)
        (field_identifier))
      (arguments)))
  (render_expression
    (call_expression
      (field_expression
        (identifier)
        (field_identifier))
      (arguments
        (string_literal))))
  (render_expression
    (call_expression
      (field_expression
        (identifier)
        (field_identifier))
      (arguments
        (string_literal))))
  (render_expression
    (call_expression
      (field_expression
        (identifier)
        (field_identifier))
      (arguments
        (string_literal))))
  (render_expression
    (call_expression
      (field_expression
        (identifier)
        (field_identifier))
      (arguments
        (string_literal)
        (string_literal))))
  (render_expression
    (call_expression
      (field_expression
        (identifier)
        (field_identifier))
      (arguments
        (string_literal)
        (string_literal))))
  (render_expression
    (call_expression
      (field_expression
        (identifier)
        (field_identifier))
      (arguments
        (string_literal)
        (string_literal))))
  (control_tag
    (for_statement
      (identifier)
      (range_expression
        (number_literal)
        (number_literal))))
  (control_tag
    (endfor_statement))
  (control_tag
    (for_statement
      (identifier)
      (range_expression
        (number_literal)
        (number_literal))))
  (control_tag
    (endfor_statement))
  (control_tag
    (match_statement
      (identifier)))
  (control_tag
    (when_statement
      (with_pattern
        (scoped_identifier
          (identifier)
          (identifier))
        (identifier))))
  (control_tag
    (when_statement
      (scoped_identifier
        (scoped_identifier
          (scoped_identifier
            (identifier)
            (identifier))
          (identifier))
        (identifier))))
  (control_tag
    (endmatch_statement))
  (render_expression
    (call_expression
      (scoped_identifier
        (scoped_identifier
          (scoped_identifier
            (identifier)
            (identifier))
          (identifier))
        (identifier))
      (arguments)))
  (comment)
  (content))

================================================================================
attr
================================================================================

{{ inner.a }}

--------------------------------------------------------------------------------

(source
  (render_expression
    (field_expression
      (identifier)
      (field_identifier)))
  (content))

================================================================================
base
================================================================================

{{ title }}
{% block content %}{% endblock %}
{% block foo %}Foo{% endblock %}
Copyright 2017

--------------------------------------------------------------------------------

(source
  (render_expression
    (identifier))
  (control_tag
    (block_statement
      (identifier)))
  (control_tag
    (endblock_statement))
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (control_tag
    (endblock_statement))
  (content))

================================================================================
big-table
================================================================================

<table>
{% for row in table %}
<tr>{% for col in row %}<td>{{ col|escape }}</td>{% endfor %}</tr>
{% endfor %}
</table>

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (for_statement
      (identifier)
      (identifier)))
  (content)
  (control_tag
    (for_statement
      (identifier)
      (identifier)))
  (content)
  (render_expression
    (filter_expression
      (identifier)
      (identifier)))
  (content)
  (control_tag
    (endfor_statement))
  (content)
  (control_tag
    (endfor_statement))
  (content))

================================================================================
block_in_include_base
================================================================================

{%- block block_in_base -%}
    block_in_base: from base!
{% endblock -%}

{%- include "block_in_include_partial.html" -%}

--------------------------------------------------------------------------------

(source
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (control_tag
    (endblock_statement))
  (control_tag
    (include_statement
      (string_literal)))
  (content))

================================================================================
blocks
================================================================================

{% block index %}
Section: {{ s1 }}
{% endblock %}

{% block section -%}
  [
  {%- for value in  values -%}
    {{ value }}
  {%- endfor -%}
  ]
{%- endblock %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (render_expression
    (identifier))
  (control_tag
    (endblock_statement))
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (control_tag
    (for_statement
      (identifier)
      (identifier)))
  (render_expression
    (identifier))
  (control_tag
    (endfor_statement))
  (content)
  (control_tag
    (endblock_statement))
  (content))

================================================================================
child
================================================================================

{% extends "base.html" %}
{% block content %}({{ title }}) Content goes here{% endblock content %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (extends_statement
      (string_literal)))
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (endblock_statement
      (identifier)))
  (content))

================================================================================
deep-base
================================================================================

{% import "macro.html" as libb %}
<html>
  <head>
  {% block head %}
    <style></style>
  {% endblock %}
  </head>
  <body>
  {% block body %}
    {% call libb::thrice("nav") %}{% endcall %}
    Copyright {{ year }}
  {% endblock %}
  </body>
</html>

--------------------------------------------------------------------------------

(source
  (control_tag
    (import_statement
      (string_literal)
      (identifier)))
  (content)
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (control_tag
    (endblock_statement))
  (content)
  (control_tag
    (block_statement
      (identifier)))
  (control_tag
    (macro_call_statement
      (call_expression
        (scoped_identifier
          (identifier)
          (identifier))
        (arguments
          (string_literal)))))
  (control_tag
    (endcall_statement))
  (content)
  (render_expression
    (identifier))
  (control_tag
    (endblock_statement))
  (content))

================================================================================
deep-mid
================================================================================

{% extends "deep-base.html" %}
{% import "macro.html" as libm %}

{% block head %}
  {{ title }}
  {{ super() }}
{% endblock %}

{% block body %}
  <div id="wrap">
    <section id="content">
    {% block content %}
      No content found
    {% endblock %}
    </section>
    <section id="nav">
      {% call libm::thrice("nav") %}{% endcall %}
    </section>
  </div>
{% endblock %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (extends_statement
      (string_literal)))
  (control_tag
    (import_statement
      (string_literal)
      (identifier)))
  (control_tag
    (block_statement
      (identifier)))
  (render_expression
    (identifier))
  (render_expression
    (call_expression
      (identifier)
      (arguments)))
  (control_tag
    (endblock_statement))
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (control_tag
    (endblock_statement))
  (content)
  (control_tag
    (macro_call_statement
      (call_expression
        (scoped_identifier
          (identifier)
          (identifier))
        (arguments
          (string_literal)))))
  (control_tag
    (endcall_statement))
  (content)
  (control_tag
    (endblock_statement))
  (content))

================================================================================
else
================================================================================

{% if cond %}true{% else %}false{% endif %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (if_statement
      (identifier)))
  (content)
  (control_tag
    (else_statement))
  (content)
  (control_tag
    (endif_statement))
  (content))

================================================================================
else-if
================================================================================

{% if cond %}true{% else if check %}checked{% else %}false{% endif %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (if_statement
      (identifier)))
  (content)
  (control_tag
    (else_if_statement
      (identifier)))
  (content)
  (control_tag
    (else_statement))
  (content)
  (control_tag
    (endif_statement))
  (content))

================================================================================
extend_and_import
================================================================================

{% import "macro.html" as m1 %}

{% block header %}{% endblock %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (import_statement
      (string_literal)
      (identifier)))
  (control_tag
    (block_statement
      (identifier)))
  (control_tag
    (endblock_statement))
  (content))

================================================================================
filters
================================================================================

{{ strvar|e }}

--------------------------------------------------------------------------------

(source
  (render_expression
    (filter_expression
      (identifier)
      (identifier)))
  (content))

================================================================================
filters_join
================================================================================

{{ s|join(", ") }}

--------------------------------------------------------------------------------

(source
  (render_expression
    (filter_expression
      (identifier)
      (identifier)
      (arguments
        (string_literal))))
  (content))

================================================================================
for-range
================================================================================

{% for s in 0..2 -%}
    foo{% if loop.first %} (first){% endif %}{% if loop.last %} (last){% endif %}
{% endfor -%}

{% for s in init..1 -%}
    bar
{% endfor -%}

{% for s in 0..end -%}
    foo
{% endfor -%}

{% for s in init..end -%}
    bar
{% endfor -%}

--------------------------------------------------------------------------------

(source
  (control_tag
    (for_statement
      (identifier)
      (range_expression
        (number_literal)
        (number_literal))))
  (content)
  (control_tag
    (if_statement
      (field_expression
        (identifier)
        (field_identifier))))
  (content)
  (control_tag
    (endif_statement))
  (control_tag
    (if_statement
      (field_expression
        (identifier)
        (field_identifier))))
  (content)
  (control_tag
    (endif_statement))
  (control_tag
    (endfor_statement))
  (control_tag
    (for_statement
      (identifier)
      (range_expression
        (identifier)
        (number_literal))))
  (content)
  (control_tag
    (endfor_statement))
  (control_tag
    (for_statement
      (identifier)
      (range_expression
        (number_literal)
        (identifier))))
  (content)
  (control_tag
    (endfor_statement))
  (control_tag
    (for_statement
      (identifier)
      (range_expression
        (identifier)
        (identifier))))
  (content)
  (control_tag
    (endfor_statement))
  (content))

================================================================================
for
================================================================================

{% for s in strings %}
  {{- loop.index0 }}. {{ s }}{% if loop.first %} (first){% endif %}
{% endfor %}
{% for (s1, s2, ) in tuple_strings %}
  {{- loop.index0 }}. {{ s1 }},{{ s2 }}{% if loop.first %} (first){% endif %}
{% endfor %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (for_statement
      (identifier)
      (identifier)))
  (render_expression
    (field_expression
      (identifier)
      (field_identifier)))
  (content)
  (render_expression
    (identifier))
  (control_tag
    (if_statement
      (field_expression
        (identifier)
        (field_identifier))))
  (content)
  (control_tag
    (endif_statement))
  (control_tag
    (endfor_statement))
  (control_tag
    (for_statement
      (tuple_pattern
        (identifier)
        (identifier))
      (identifier)))
  (render_expression
    (field_expression
      (identifier)
      (field_identifier)))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (control_tag
    (if_statement
      (field_expression
        (identifier)
        (field_identifier))))
  (content)
  (control_tag
    (endif_statement))
  (control_tag
    (endfor_statement))
  (content))

================================================================================
format
================================================================================

{{ "{:?}"|format(var) }}

--------------------------------------------------------------------------------

(source
  (render_expression
    (filter_expression
      (string_literal)
      (identifier)
      (arguments
        (identifier))))
  (content))

================================================================================
html-base
================================================================================

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">

        <title>{%- block title -%} Default title {%- endblock title -%}</title>
    </head>

    <body class="{% block body_classes %}{% endblock body_classes %}">
        {%- block body -%}{%- endblock body -%}
    </body>
</html>

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (control_tag
    (endblock_statement
      (identifier)))
  (content)
  (control_tag
    (block_statement
      (identifier)))
  (control_tag
    (endblock_statement
      (identifier)))
  (content)
  (control_tag
    (block_statement
      (identifier)))
  (control_tag
    (endblock_statement
      (identifier)))
  (content))

================================================================================
if-let-struct
================================================================================

{% if let Digits { one, two, three } = digits %}{{ one }} {{ two }} {{ three }}{% endif %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (if_statement
      (let_condition
        (struct_pattern
          (identifier)
          (identifier)
          (identifier)
          (identifier))
        (identifier))))
  (render_expression
    (identifier))
  (render_expression
    (identifier))
  (render_expression
    (identifier))
  (control_tag
    (endif_statement))
  (content))

================================================================================
if
================================================================================

{% if cond %}true{% endif %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (if_statement
      (identifier)))
  (content)
  (control_tag
    (endif_statement))
  (content))

================================================================================
let-destruct-tuple
================================================================================

{% let (a, ((b, c), (d))) = abcd %}{{a}}{{b}}{{c}}{{d}}
{% let (a, (_, d)) = abcd %}{{a}}{{d}}
{% let (((a))) = abcd.0 %}{{a}}

--------------------------------------------------------------------------------

(source
  (control_tag
    (let_statement
      (tuple_pattern
        (identifier)
        (tuple_pattern
          (tuple_pattern
            (identifier)
            (identifier))
          (tuple_pattern
            (identifier))))
      (identifier)))
  (render_expression
    (identifier))
  (render_expression
    (identifier))
  (render_expression
    (identifier))
  (render_expression
    (identifier))
  (control_tag
    (let_statement
      (tuple_pattern
        (identifier)
        (tuple_pattern
          (placeholder)
          (identifier)))
      (identifier)))
  (render_expression
    (identifier))
  (render_expression
    (identifier))
  (control_tag
    (let_statement
      (tuple_pattern
        (tuple_pattern
          (tuple_pattern
            (identifier))))
      (field_expression
        (identifier)
        (number_literal))))
  (render_expression
    (identifier))
  (content))

================================================================================
let-shadow
================================================================================

{%- let a = 1 -%}
{%- let b -%}

{%- if cond -%}
    {%- let b = 22 -%}
    {{ b }}-

    {%- let b = 33 -%}
    {{ a }}-{{ b }}-
{%- else -%}
    {%- let b = 222 -%}
    {{ b }}-

    {%- let b = 333 -%}
    {{ a }}-{{ b }}-

    {%- let (a, b) = Self::tuple() -%}
    {{ a }}-{{ b }}-
{%- endif -%}

{%- let a = 11 -%}
{{ a }}-{{ b }}

--------------------------------------------------------------------------------

(source
  (control_tag
    (let_statement
      (identifier)
      (number_literal)))
  (control_tag
    (let_statement
      (identifier)))
  (control_tag
    (if_statement
      (identifier)))
  (control_tag
    (let_statement
      (identifier)
      (number_literal)))
  (render_expression
    (identifier))
  (content)
  (control_tag
    (let_statement
      (identifier)
      (number_literal)))
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (else_statement))
  (control_tag
    (let_statement
      (identifier)
      (number_literal)))
  (render_expression
    (identifier))
  (content)
  (control_tag
    (let_statement
      (identifier)
      (number_literal)))
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (let_statement
      (tuple_pattern
        (identifier)
        (identifier))
      (call_expression
        (scoped_identifier
          (identifier)
          (identifier))
        (arguments))))
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (endif_statement))
  (control_tag
    (let_statement
      (identifier)
      (number_literal)))
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content))

================================================================================
let
================================================================================

{% let v = s %}{{ v }}
{% let (v1,v2) = t %}{{ v1 }}{{ v2 }}

--------------------------------------------------------------------------------

(source
  (control_tag
    (let_statement
      (identifier)
      (identifier)))
  (render_expression
    (identifier))
  (control_tag
    (let_statement
      (tuple_pattern
        (identifier)
        (identifier))
      (identifier)))
  (render_expression
    (identifier))
  (render_expression
    (identifier))
  (content))

================================================================================
literals-escape
================================================================================

{{ '\x41' }}{{ '\n' }}{{ '\r' }}{{ '\t' }}{{ '\\' }}{{ '\0' }}{{ '\u{2665}' }}{{ '\'' }}{{ '\"' }}{{ '"' }}
{{ "\x41\n\r\t\\\0\u{2665}\'\"'" }}

--------------------------------------------------------------------------------

(source
  (render_expression
    (char_literal))
  (render_expression
    (char_literal))
  (render_expression
    (char_literal))
  (render_expression
    (char_literal))
  (render_expression
    (char_literal))
  (render_expression
    (char_literal))
  (render_expression
    (char_literal))
  (render_expression
    (char_literal))
  (render_expression
    (char_literal))
  (render_expression
    (char_literal))
  (render_expression
    (string_literal))
  (content))

================================================================================
literals
================================================================================

{{ 'a' }}
{{ "a" }}
{{ true }}
{{ false }}

--------------------------------------------------------------------------------

(source
  (render_expression
    (char_literal))
  (render_expression
    (string_literal))
  (render_expression
    (boolean_literal))
  (render_expression
    (boolean_literal))
  (content))

================================================================================
macro
================================================================================

1

{%- macro thrice(param) -%}

{{ param }} {{ param }} {{ param }}

{%- endmacro -%}

2

{%- call thrice(s) -%}{%- endcall -%}

3

{%- macro twice(param) -%}

{{ param }} {{ param }}

{%- endmacro twice -%}

4

{%- call twice(s) -%}{%- endcall -%}

5

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (macro_statement
      (identifier)
      (arguments
        (identifier))))
  (render_expression
    (identifier))
  (render_expression
    (identifier))
  (render_expression
    (identifier))
  (control_tag
    (endmacro_statement))
  (content)
  (control_tag
    (macro_call_statement
      (call_expression
        (identifier)
        (arguments
          (identifier)))))
  (control_tag
    (endcall_statement))
  (content)
  (control_tag
    (macro_statement
      (identifier)
      (arguments
        (identifier))))
  (render_expression
    (identifier))
  (render_expression
    (identifier))
  (control_tag
    (endmacro_statement
      (identifier)))
  (content)
  (control_tag
    (macro_call_statement
      (call_expression
        (identifier)
        (arguments
          (identifier)))))
  (control_tag
    (endcall_statement))
  (content))

================================================================================
macro-import-callexpr
================================================================================

{% import "nested-macro-callexpr.html" as otherscope %}

{% macro intermediate() %}
    {{- otherscope::parent() -}}
{% endmacro %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (import_statement
      (string_literal)
      (identifier)))
  (control_tag
    (macro_statement
      (identifier)
      (arguments)))
  (render_expression
    (call_expression
      (scoped_identifier
        (identifier)
        (identifier))
      (arguments)))
  (control_tag
    (endmacro_statement))
  (content))

================================================================================
macro-with-caller
================================================================================

{%- macro outer() -%}
    <div>{{caller()}}</div>
{%- endmacro -%}

{%- macro inner() -%}
    content
{%- endmacro -%}

{%- macro intermediate() -%}
    intermediate
    {%- call inner() -%}{%- endcall -%}
{%- endmacro -%}

--------------------------------------------------------------------------------

(source
  (control_tag
    (macro_statement
      (identifier)
      (arguments)))
  (content)
  (render_expression
    (call_expression
      (identifier)
      (arguments)))
  (content)
  (control_tag
    (endmacro_statement))
  (control_tag
    (macro_statement
      (identifier)
      (arguments)))
  (content)
  (control_tag
    (endmacro_statement))
  (control_tag
    (macro_statement
      (identifier)
      (arguments)))
  (content)
  (control_tag
    (macro_call_statement
      (call_expression
        (identifier)
        (arguments))))
  (control_tag
    (endcall_statement))
  (control_tag
    (endmacro_statement))
  (content))

================================================================================
match-enum-or
================================================================================

The card is
{%- match suit %}
   {%- when Suit::Clubs or Suit::Spades -%}
     {{ " black" }}
   {%- when Suit::Diamonds or Suit::Hearts -%}
     {{ " red" }}
{%- endmatch %}

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (match_statement
      (identifier)))
  (control_tag
    (when_statement
      (or_pattern
        (scoped_identifier
          (identifier)
          (identifier))
        (scoped_identifier
          (identifier)
          (identifier)))))
  (render_expression
    (string_literal))
  (control_tag
    (when_statement
      (or_pattern
        (scoped_identifier
          (identifier)
          (identifier))
        (scoped_identifier
          (identifier)
          (identifier)))))
  (render_expression
    (string_literal))
  (control_tag
    (endmatch_statement))
  (content))

================================================================================
match-literal-char
================================================================================

{% match item %}
{% when 'a' %}
Found literal a
{% when 'b' %}
Found literal b
{% else %}
Else found {{item}}
{% endmatch %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (match_statement
      (identifier)))
  (control_tag
    (when_statement
      (char_literal)))
  (content)
  (control_tag
    (when_statement
      (char_literal)))
  (content)
  (control_tag
    (else_statement))
  (content)
  (render_expression
    (identifier))
  (control_tag
    (endmatch_statement))
  (content))

================================================================================
match-literal-num
================================================================================

{% match item %}
{% when 42 %}
Found answer to everything
{% else %}
Else found {{item}}
{% endmatch %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (match_statement
      (identifier)))
  (control_tag
    (when_statement
      (number_literal)))
  (content)
  (control_tag
    (else_statement))
  (content)
  (render_expression
    (identifier))
  (control_tag
    (endmatch_statement))
  (content))

================================================================================
match-no-ws
================================================================================

{% match foo %}{% when Some with (bar) %}{{ bar }}{% when None %}{% endmatch %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (match_statement
      (identifier)))
  (control_tag
    (when_statement
      (with_pattern
        (identifier)
        (identifier))))
  (render_expression
    (identifier))
  (control_tag
    (when_statement
      (identifier)))
  (control_tag
    (endmatch_statement))
  (content))

================================================================================
match-opt-bool
================================================================================

{% match item %}
{% when Some with (true) %}
Found Some(true)
{% when Some with (false) %}
Found Some(false)
{% when None %}
Not Found
{% endmatch %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (match_statement
      (identifier)))
  (control_tag
    (when_statement
      (with_pattern
        (identifier)
        (boolean_literal))))
  (content)
  (control_tag
    (when_statement
      (with_pattern
        (identifier)
        (boolean_literal))))
  (content)
  (control_tag
    (when_statement
      (identifier)))
  (content)
  (control_tag
    (endmatch_statement))
  (content))

================================================================================
match-opt
================================================================================

{% match item %}
{% when Some with ("foo") %}
Found literal foo
{% when Some with (val) %}
Found {{val}}
{% when None %}
Not Found
{% endmatch %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (match_statement
      (identifier)))
  (control_tag
    (when_statement
      (with_pattern
        (identifier)
        (string_literal))))
  (content)
  (control_tag
    (when_statement
      (with_pattern
        (identifier)
        (identifier))))
  (content)
  (render_expression
    (identifier))
  (control_tag
    (when_statement
      (identifier)))
  (content)
  (control_tag
    (endmatch_statement))
  (content))

================================================================================
match-option-result-option
================================================================================

{%- match foo -%}
    {%- when None -%}
        nothing
    {%- when Some(Err(err)) -%}
        err={{err}}
    {%- when Some(Ok(None)) -%}
        num=absent
    {%- when Some(Ok(Some(num))) -%}
        num={{num}}
{%- endmatch -%}

--------------------------------------------------------------------------------

(source
  (control_tag
    (match_statement
      (identifier)))
  (control_tag
    (when_statement
      (identifier)))
  (content)
  (control_tag
    (when_statement
      (tuple_struct_pattern
        (identifier)
        (tuple_struct_pattern
          (identifier)
          (identifier)))))
  (content)
  (render_expression
    (identifier))
  (control_tag
    (when_statement
      (tuple_struct_pattern
        (identifier)
        (tuple_struct_pattern
          (identifier)
          (identifier)))))
  (content)
  (control_tag
    (when_statement
      (tuple_struct_pattern
        (identifier)
        (tuple_struct_pattern
          (identifier)
          (tuple_struct_pattern
            (identifier)
            (identifier))))))
  (content)
  (render_expression
    (identifier))
  (control_tag
    (endmatch_statement))
  (content))

================================================================================
named-end
================================================================================

{% extends "base.html" %}
{# Testing named "endmacro" #}
{% macro foo(b) -%}
    {% if b %}t{% else %}f{% endif -%}
{% endmacro foo -%}
{# Testing named endblock declaration #}
{% block what %}{% endblock what %}
{# Testing named endblock call #}
{% block foo %}tadam{% endblock foo %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (extends_statement
      (string_literal)))
  (comment)
  (control_tag
    (macro_statement
      (identifier)
      (arguments
        (identifier))))
  (control_tag
    (if_statement
      (identifier)))
  (content)
  (control_tag
    (else_statement))
  (content)
  (control_tag
    (endif_statement))
  (control_tag
    (endmacro_statement
      (identifier)))
  (comment)
  (control_tag
    (block_statement
      (identifier)))
  (control_tag
    (endblock_statement
      (identifier)))
  (comment)
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (control_tag
    (endblock_statement
      (identifier)))
  (content))

================================================================================
num-literals
================================================================================

{% let plain_int = 9__0__ -%}
{% let neg_int = -9__0__isize -%}
{% let suffix_int = 9__0__i32 -%}
{% let bin_int = 0b__1__0__ -%}
{% let oct_int = 0o__7__0__ -%}
{% let hex_int = 0x__f__0__ -%}
{% let plain_float = 1__0__.5__0__ -%}
{% let suffix_float = 1__0__.5__0__f32 -%}
{% let exp_float = 1__0__e+__1__0__f32 -%}
{% let dotexp_float = 1__0__.5__0__e+__1__0__f32 -%}
[{{ plain_int }}, {{ neg_int }}, {{ suffix_int }}, {{ bin_int }}, {{ oct_int }}, {{ hex_int }}, {{ plain_float }}, {{ suffix_float }}, {{ exp_float }}, {{ dotexp_float }}]
{% for value in 1..2 -%}
    {{ value }}
{%- endfor %}
{% for value in 1..=2 -%}
    {{ value }}
{%- endfor %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (let_statement
      (identifier)
      (number_literal)))
  (control_tag
    (let_statement
      (identifier)
      (number_literal)))
  (control_tag
    (let_statement
      (identifier)
      (number_literal)))
  (control_tag
    (let_statement
      (identifier)
      (number_literal)))
  (control_tag
    (let_statement
      (identifier)
      (number_literal)))
  (control_tag
    (let_statement
      (identifier)
      (number_literal)))
  (control_tag
    (let_statement
      (identifier)
      (number_literal)))
  (control_tag
    (let_statement
      (identifier)
      (number_literal)))
  (control_tag
    (let_statement
      (identifier)
      (number_literal)))
  (control_tag
    (let_statement
      (identifier)
      (number_literal)))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (for_statement
      (identifier)
      (range_expression
        (number_literal)
        (number_literal))))
  (render_expression
    (identifier))
  (control_tag
    (endfor_statement))
  (control_tag
    (for_statement
      (identifier)
      (range_expression
        (number_literal)
        (number_literal))))
  (render_expression
    (identifier))
  (control_tag
    (endfor_statement))
  (content))

================================================================================
operators
================================================================================

{% if a * c > b -%}
  mul
{%- endif -%}
{% if c / c == a -%}
  div
{%- endif -%}
{% if a % c == b -%}
  mod
{%- endif -%}
{% if a + b == c -%}
  add
{%- endif -%}
{% if a << b == c -%}
  rsh
{%- endif -%}
{% if c >> b == a -%}
  lsh
{%- endif -%}
{% if a bitand b == b -%}
  band
{%- endif -%}
{% if b xor c == a + c -%}
  bxor
{%- endif -%}
{% if b bitor c == a + c -%}
  bor
{%- endif -%}
{% if a == b && a + b == c -%}
  and
{%- endif -%}
{% if a == c || a == 1 -%}
  or
{%- endif -%}

--------------------------------------------------------------------------------

(source
  (control_tag
    (if_statement
      (binary_expression
        (binary_expression
          (identifier)
          (identifier))
        (identifier))))
  (content)
  (control_tag
    (endif_statement))
  (control_tag
    (if_statement
      (binary_expression
        (binary_expression
          (identifier)
          (identifier))
        (identifier))))
  (content)
  (control_tag
    (endif_statement))
  (control_tag
    (if_statement
      (binary_expression
        (binary_expression
          (identifier)
          (identifier))
        (identifier))))
  (content)
  (control_tag
    (endif_statement))
  (control_tag
    (if_statement
      (binary_expression
        (binary_expression
          (identifier)
          (identifier))
        (identifier))))
  (content)
  (control_tag
    (endif_statement))
  (control_tag
    (if_statement
      (binary_expression
        (binary_expression
          (identifier)
          (identifier))
        (identifier))))
  (content)
  (control_tag
    (endif_statement))
  (control_tag
    (if_statement
      (binary_expression
        (binary_expression
          (identifier)
          (identifier))
        (identifier))))
  (content)
  (control_tag
    (endif_statement))
  (control_tag
    (if_statement
      (binary_expression
        (binary_expression
          (identifier)
          (identifier))
        (identifier))))
  (content)
  (control_tag
    (endif_statement))
  (control_tag
    (if_statement
      (binary_expression
        (binary_expression
          (identifier)
          (identifier))
        (binary_expression
          (identifier)
          (identifier)))))
  (content)
  (control_tag
    (endif_statement))
  (control_tag
    (if_statement
      (binary_expression
        (binary_expression
          (identifier)
          (identifier))
        (binary_expression
          (identifier)
          (identifier)))))
  (content)
  (control_tag
    (endif_statement))
  (control_tag
    (if_statement
      (binary_expression
        (binary_expression
          (identifier)
          (identifier))
        (binary_expression
          (binary_expression
            (identifier)
            (identifier))
          (identifier)))))
  (content)
  (control_tag
    (endif_statement))
  (control_tag
    (if_statement
      (binary_expression
        (binary_expression
          (identifier)
          (identifier))
        (binary_expression
          (identifier)
          (number_literal)))))
  (content)
  (control_tag
    (endif_statement))
  (content))

================================================================================
option
================================================================================

{% if var.is_some() -%}
  some: {{ var.unwrap() }}
{%- else -%}
  none
{%- endif %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (if_statement
      (call_expression
        (field_expression
          (identifier)
          (field_identifier))
        (arguments))))
  (content)
  (render_expression
    (call_expression
      (field_expression
        (identifier)
        (field_identifier))
      (arguments)))
  (control_tag
    (else_statement))
  (content)
  (control_tag
    (endif_statement))
  (content))

================================================================================
precedence-for
================================================================================

{% for s in strings %}
    {{- loop.index0 }}. {{ s }}{{ 2 * loop.index }}{% if !loop.first %}{% else %} (first){% endif %}{% if loop.last %} (last){% endif %}
{% endfor %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (for_statement
      (identifier)
      (identifier)))
  (render_expression
    (field_expression
      (identifier)
      (field_identifier)))
  (content)
  (render_expression
    (identifier))
  (render_expression
    (binary_expression
      (number_literal)
      (field_expression
        (identifier)
        (field_identifier))))
  (control_tag
    (if_statement
      (unary_expression
        (field_expression
          (identifier)
          (field_identifier)))))
  (control_tag
    (else_statement))
  (content)
  (control_tag
    (endif_statement))
  (control_tag
    (if_statement
      (field_expression
        (identifier)
        (field_identifier))))
  (content)
  (control_tag
    (endif_statement))
  (control_tag
    (endfor_statement))
  (content))

================================================================================
raw-complex
================================================================================

{% raw %}
{% block name %}
  <span>{{ name }}</span>
{% endblock %}
{% endraw %}

--------------------------------------------------------------------------------

(source
  (raw_statement)
  (raw_content)
  (endraw_statement)
  (content))

================================================================================
raw-simple
================================================================================

{% raw %}
<span>{{ name }}</span>
{% endraw %}

--------------------------------------------------------------------------------

(source
  (raw_statement)
  (raw_content)
  (endraw_statement)
  (content))

================================================================================
raw-ws
================================================================================

<{% raw -%} {{hello}} {%- endraw %}>
< {%- raw %}{{bye}}{% endraw -%} >

--------------------------------------------------------------------------------

(source
  (content)
  (raw_statement)
  (raw_content)
  (endraw_statement)
  (content)
  (raw_statement)
  (raw_content)
  (endraw_statement)
  (content))

================================================================================
render_in_place
================================================================================

Section 1: {{ s1 }}
Section 2: {{ s2|safe }}
Section 3 for:
{% for s in s3.as_slice() -%}
* {{ s }}
{% endfor %}

--------------------------------------------------------------------------------

(source
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (filter_expression
      (identifier)
      (identifier)))
  (content)
  (control_tag
    (for_statement
      (identifier)
      (call_expression
        (field_expression
          (identifier)
          (field_identifier))
        (arguments))))
  (content)
  (render_expression
    (identifier))
  (control_tag
    (endfor_statement))
  (content))

================================================================================
rust-macros-full-path
================================================================================

Hello, {{ foo::hello2!() }}!

--------------------------------------------------------------------------------

(source
  (content)
  (render_expression
    (macro_invocation
      (scoped_identifier
        (identifier)
        (identifier))
      (token_tree)))
  (content))

================================================================================
simple
================================================================================

{# our very first test! #}
hello world, {{ strvar }}
with number: {{ num }}
Iñtërnâtiônàlizætiøn is important
in vars too: {{ i18n }}

--------------------------------------------------------------------------------

(source
  (comment)
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content))

================================================================================
teams
================================================================================

<html>
  <head>
    <title>{{ year }}</title>
  </head>
  <body>
    <h1>CSL {{ year }}</h1>
    <ul>
    {% for team in teams %}
      <li class="{% if loop.index0 == 0 %}champion{% endif %}">
      <b>{{ team.name }}</b>: {{ team.score }}
      </li>
    {% endfor %}
    </ul>
  </body>
</html>

--------------------------------------------------------------------------------

(source
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (for_statement
      (identifier)
      (identifier)))
  (content)
  (control_tag
    (if_statement
      (binary_expression
        (field_expression
          (identifier)
          (field_identifier))
        (number_literal))))
  (content)
  (control_tag
    (endif_statement))
  (content)
  (render_expression
    (field_expression
      (identifier)
      (field_identifier)))
  (content)
  (render_expression
    (field_expression
      (identifier)
      (field_identifier)))
  (content)
  (control_tag
    (endfor_statement))
  (content))

================================================================================
tuple-attr
================================================================================

{{ tuple.0 }}{{ tuple.1 }}

--------------------------------------------------------------------------------

(source
  (render_expression
    (field_expression
      (identifier)
      (number_literal)))
  (render_expression
    (field_expression
      (identifier)
      (number_literal)))
  (content))
