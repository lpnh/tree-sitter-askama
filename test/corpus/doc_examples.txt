================================================================================
constants
================================================================================

<p>The user limit is {{ crate::MAX_NB_USERS }}.</p>
{% set value = 4 %}
{% if value > crate::MAX_NB_USERS %}
    <p>{{ value }} is bigger than MAX_NB_USERS.</p>
{% else %}
    <p>{{ value }} is less than MAX_NB_USERS.</p>
{% endif %}

--------------------------------------------------------------------------------

(source
  (content)
  (render_expression
    (scoped_identifier
      (identifier)
      (identifier)))
  (content)
  (control_tag
    (let_statement
      (identifier)
      (number_literal)))
  (control_tag
    (if_statement
      (binary_expression
        (identifier)
        (scoped_identifier
          (identifier)
          (identifier)))))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (else_statement))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (endif_statement))
  (content))

================================================================================
assignments_1
================================================================================

{% let name = user.name %}
{% let len = name.len() %}

{% let val -%}
{% if len == 0 -%}
  {% let val = "foo" -%}
{% else -%}
  {% let val = name -%}
{% endif -%}
{{ val }}

--------------------------------------------------------------------------------

(source
  (control_tag
    (let_statement
      (identifier)
      (field_expression
        (identifier)
        (field_identifier))))
  (control_tag
    (let_statement
      (identifier)
      (call_expression
        (field_expression
          (identifier)
          (field_identifier))
        (arguments))))
  (control_tag
    (let_statement
      (identifier)))
  (control_tag
    (if_statement
      (binary_expression
        (identifier)
        (number_literal))))
  (control_tag
    (let_statement
      (identifier)
      (string_literal)))
  (control_tag
    (else_statement))
  (control_tag
    (let_statement
      (identifier)
      (identifier)))
  (control_tag
    (endif_statement))
  (render_expression
    (identifier))
  (content))

================================================================================
assignments_2
================================================================================

{% let foo = "bar" %}
{{ foo }}

{% let foo = "baz" %}
{{ foo }}

--------------------------------------------------------------------------------

(source
  (control_tag
    (let_statement
      (identifier)
      (string_literal)))
  (render_expression
    (identifier))
  (control_tag
    (let_statement
      (identifier)
      (string_literal)))
  (render_expression
    (identifier))
  (content))

================================================================================
assignments_3
================================================================================

{# In this example, `foo` is an iterator. If you want to be able to iterate it,
you need it to be mutable #}
{% let mut foo = [1, 2].iter() %}
{{ foo.next().unwrap() }}

--------------------------------------------------------------------------------

(source
  (comment)
  (control_tag
    (let_statement
      (identifier)
      (call_expression
        (field_expression
          (array_expression
            (number_literal)
            (number_literal))
          (field_identifier))
        (arguments))))
  (render_expression
    (call_expression
      (field_expression
        (call_expression
          (field_expression
            (identifier)
            (field_identifier))
          (arguments))
        (field_identifier))
      (arguments)))
  (content))

================================================================================
filter_blocks_1
================================================================================

{% filter lower %}
  {{ t }} / HELLO / {{ u }}
{% endfilter %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (filter_statement
      (identifier)))
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (control_tag
    (endfilter_statement))
  (content))

================================================================================
filter_blocks_2
================================================================================

{% filter lower|capitalize %}
  {{ t }} / HELLO / {{ u }}
{% endfilter %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (filter_statement
      (identifier)
      (identifier)))
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (control_tag
    (endfilter_statement))
  (content))

================================================================================
whitespace_1
================================================================================

{% if foo %}
  {{- bar -}}
{% else if another -%}
  nothing
{%- endif %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (if_statement
      (identifier)))
  (render_expression
    (identifier))
  (control_tag
    (else_if_statement
      (identifier)))
  (content)
  (control_tag
    (endif_statement))
  (content))

================================================================================
whitespace_2
================================================================================

<a href="/" {#+ #}
   class="something">text</a>

--------------------------------------------------------------------------------

(source
  (content)
  (comment)
  (content))

================================================================================
whitespace_3
================================================================================

{% if something ~%}
Hello
{%~ endif %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (if_statement
      (identifier)))
  (content)
  (control_tag
    (endif_statement))
  (content))

================================================================================
calling_functions
================================================================================

{# This is the equivalent of `self.method()`. #}
{{ method() }}
{# This is the equivalent of `self::function()`, which will call the
`function` function from the current module. #}
{{ self::function() }}
{# This is the equivalent of `super::b::f()`. #}
{{ super::b::f() }}

--------------------------------------------------------------------------------

(source
  (comment)
  (render_expression
    (call_expression
      (identifier)
      (arguments)))
  (comment)
  (render_expression
    (call_expression
      (scoped_identifier
        (identifier)
        (identifier))
      (arguments)))
  (comment)
  (render_expression
    (call_expression
      (scoped_identifier
        (scoped_identifier
          (identifier)
          (identifier))
        (identifier))
      (arguments)))
  (content))

================================================================================
base_template_1
================================================================================

<!DOCTYPE html>
<html lang="en">
  <head>
    <title>{% block title %}{{ title }} - My Site{% endblock %}</title>
    {% block head %}{% endblock %}
  </head>
  <body>
    <div id="content">
      {% block content %}<p>Placeholder content</p>{% endblock %}
    </div>
  </body>
</html>

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (block_statement
      (identifier)))
  (render_expression
    (identifier))
  (content)
  (control_tag
    (endblock_statement))
  (content)
  (control_tag
    (block_statement
      (identifier)))
  (control_tag
    (endblock_statement))
  (content)
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (control_tag
    (endblock_statement))
  (content))

================================================================================
base_template_2
================================================================================

{% block content %}<p>Placeholder content</p>{% endblock content %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (control_tag
    (endblock_statement
      (identifier)))
  (content))

================================================================================
child_template
================================================================================

{% extends "base.html" %}

{% block title %}Index{% endblock %}

{% block head %}
  <style>
  </style>
{% endblock %}

{% block content %}
  <h1>Index</h1>
  <p>Hello, world!</p>
  {{ super() }}
{% endblock %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (extends_statement
      (string_literal)))
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (control_tag
    (endblock_statement))
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (control_tag
    (endblock_statement))
  (control_tag
    (block_statement
      (identifier)))
  (content)
  (render_expression
    (call_expression
      (identifier)
      (arguments)))
  (control_tag
    (endblock_statement))
  (content))

================================================================================
for_1
================================================================================

<h1>Users</h1>
<ul>
{% for user in users %}
  <li>{{ user.name }}</li>
{% endfor %}
</ul>

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (for_statement
      (identifier)
      (identifier)))
  (content)
  (render_expression
    (field_expression
      (identifier)
      (field_identifier)))
  (content)
  (control_tag
    (endfor_statement))
  (content))

================================================================================
for_2
================================================================================

<h1>Users</h1>
<ul>
{% for user in users if user.is_activated %}
  <li>{{ user.name }}</li>
{% endfor %}
</ul>

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (for_statement
      (identifier)
      (identifier)
      (if_statement
        (field_expression
          (identifier)
          (field_identifier)))))
  (content)
  (render_expression
    (field_expression
      (identifier)
      (field_identifier)))
  (content)
  (control_tag
    (endfor_statement))
  (content))

================================================================================
for_3
================================================================================

<h1>Users</h1>
<ul>
{% for user in users %}
  <li>{{ user.name }}</li>
{% else %}
  <li>No users</li>
{% endfor %}
</ul>

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (for_statement
      (identifier)
      (identifier)))
  (content)
  (render_expression
    (field_expression
      (identifier)
      (field_identifier)))
  (content)
  (control_tag
    (else_statement))
  (content)
  (control_tag
    (endfor_statement))
  (content))

================================================================================
for_4
================================================================================

<h1>Users</h1>
<ul>
{% for user in users %}
   {% if loop.first %}
   <li>First: {{user.name}}</li>
   {% else %}
   <li>User#{{loop.index}}: {{user.name}}</li>
   {% endif %}
{% endfor %}
</ul>

--------------------------------------------------------------------------------

(source
  (content)
  (control_tag
    (for_statement
      (identifier)
      (identifier)))
  (control_tag
    (if_statement
      (field_expression
        (identifier)
        (field_identifier))))
  (content)
  (render_expression
    (field_expression
      (identifier)
      (field_identifier)))
  (content)
  (control_tag
    (else_statement))
  (content)
  (render_expression
    (field_expression
      (identifier)
      (field_identifier)))
  (content)
  (render_expression
    (field_expression
      (identifier)
      (field_identifier)))
  (content)
  (control_tag
    (endif_statement))
  (control_tag
    (endfor_statement))
  (content))

================================================================================
if
================================================================================

{% if users.len() == 0 %}
  No users
{% else if users.len() == 1 %}
  1 user
{% elif users.len() == 2 %}
  2 users
{% else %}
  {{ users.len() }} users
{% endif %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (if_statement
      (binary_expression
        (call_expression
          (field_expression
            (identifier)
            (field_identifier))
          (arguments))
        (number_literal))))
  (content)
  (control_tag
    (else_if_statement
      (binary_expression
        (call_expression
          (field_expression
            (identifier)
            (field_identifier))
          (arguments))
        (number_literal))))
  (content)
  (control_tag
    (else_if_statement
      (binary_expression
        (call_expression
          (field_expression
            (identifier)
            (field_identifier))
          (arguments))
        (number_literal))))
  (content)
  (control_tag
    (else_statement))
  (render_expression
    (call_expression
      (field_expression
        (identifier)
        (field_identifier))
      (arguments)))
  (content)
  (control_tag
    (endif_statement))
  (content))

================================================================================
if_let
================================================================================

{% if let Some(user) = user %}
  {{ user.name }}
{% else %}
  No user
{% endif %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (if_statement
      (let_condition
        (tuple_struct_pattern
          (identifier)
          (identifier))
        (identifier))))
  (render_expression
    (field_expression
      (identifier)
      (field_identifier)))
  (control_tag
    (else_statement))
  (content)
  (control_tag
    (endif_statement))
  (content))

================================================================================
if_not_defined_1
================================================================================

{% if x is defined %}
  x is defined!
{% endif %}
{% if y is not defined %}
  y is not defined
{% else %}
  y is defined
{% endif %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (if_statement
      (is_defined_expression
        (identifier))))
  (content)
  (control_tag
    (endif_statement))
  (control_tag
    (if_statement
      (is_defined_expression
        (identifier))))
  (content)
  (control_tag
    (else_statement))
  (content)
  (control_tag
    (endif_statement))
  (content))

================================================================================
if_not_defined_2
================================================================================

{% if x is defined && x == "12" && y == Some(true) %}
...
{% endif %}

<script>
// It will generate `const x = true;` (or false is `x` is not defined).
const x = {{ x is defined }};
</script>

--------------------------------------------------------------------------------

(source
  (control_tag
    (if_statement
      (binary_expression
        (binary_expression
          (is_defined_expression
            (identifier))
          (binary_expression
            (identifier)
            (string_literal)))
        (binary_expression
          (identifier)
          (call_expression
            (identifier)
            (arguments
              (boolean_literal)))))))
  (content)
  (control_tag
    (endif_statement))
  (content)
  (render_expression
    (is_defined_expression
      (identifier)))
  (content))

================================================================================
match_1
================================================================================

{% match item %}
  {% when Some with ("foo") %}
    Found literal foo
  {% when Some with (val) %}
    Found {{ val }}
  {% when None %}
{% endmatch %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (match_statement
      (identifier)))
  (control_tag
    (when_statement
      (with_pattern
        (identifier)
        (string_literal))))
  (content)
  (control_tag
    (when_statement
      (with_pattern
        (identifier)
        (identifier))))
  (content)
  (render_expression
    (identifier))
  (control_tag
    (when_statement
      (identifier)))
  (control_tag
    (endmatch_statement))
  (content))

================================================================================
match_2
================================================================================

{% match multiple_choice_answer %}
  {% when 3 %} Correct!
  {% else %} Sorry, the right answer is "3".
{% endmatch %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (match_statement
      (identifier)))
  (control_tag
    (when_statement
      (number_literal)))
  (content)
  (control_tag
    (else_statement))
  (content)
  (control_tag
    (endmatch_statement))
  (content))

================================================================================
match_3
================================================================================

{% match result %}
  {% when Ok(val) %} Good: {{ val }}.
  {% when Err(err) %} Bad: {{ err }}.
{% endmatch %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (match_statement
      (identifier)))
  (control_tag
    (when_statement
      (tuple_struct_pattern
        (identifier)
        (identifier))))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (when_statement
      (tuple_struct_pattern
        (identifier)
        (identifier))))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (endmatch_statement))
  (content))

================================================================================
match_4
================================================================================

{% match list_of_ints %}
  {% when [first, ..] %} The list starts with a {{ first }}
  {% when _ %} The list is empty.
{% endmatch %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (match_statement
      (identifier)))
  (control_tag
    (when_statement
      (slice_pattern
        (identifier)
        (remaining_field))))
  (content)
  (render_expression
    (identifier))
  (control_tag
    (when_statement
      (placeholder)))
  (content)
  (control_tag
    (endmatch_statement))
  (content))

================================================================================
match_5
================================================================================

{% match answer %}
  {% when Ok(42) %} The answer is "42".
  {% else %} No answer wrong answer?
{% endmatch %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (match_statement
      (identifier)))
  (control_tag
    (when_statement
      (tuple_struct_pattern
        (identifier)
        (number_literal))))
  (content)
  (control_tag
    (else_statement))
  (content)
  (control_tag
    (endmatch_statement))
  (content))

================================================================================
match_6
================================================================================

{% match number %}
  {% when 1 | 4 | 86 %} Some numbers
  {% when n %} Number is {{ n }}
{% endmatch %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (match_statement
      (identifier)))
  (control_tag
    (when_statement
      (or_pattern
        (number_literal)
        (number_literal)
        (number_literal))))
  (content)
  (control_tag
    (when_statement
      (identifier)))
  (content)
  (render_expression
    (identifier))
  (control_tag
    (endmatch_statement))
  (content))

================================================================================
match_7
================================================================================

{% match number %}
  {% when 0 | 2 | 4 | 6 | 8 %}
    even
  {% endwhen %}
  {% when 1 | 3 | 5 | 7 | 9 %}
    odd
  {% endwhen %}
  {% else %}
    unknown
{% endmatch %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (match_statement
      (identifier)))
  (control_tag
    (when_statement
      (or_pattern
        (number_literal)
        (number_literal)
        (number_literal)
        (number_literal)
        (number_literal))))
  (content)
  (control_tag
    (endwhen_statement))
  (control_tag
    (when_statement
      (or_pattern
        (number_literal)
        (number_literal)
        (number_literal)
        (number_literal)
        (number_literal))))
  (content)
  (control_tag
    (endwhen_statement))
  (control_tag
    (else_statement))
  (content)
  (control_tag
    (endmatch_statement))
  (content))

================================================================================
ref_and_deref_1
================================================================================

{% let x = &"bla" %}
{% if *x == "bla" %}
Just talking
{% else if x == &"another" %}
Another?!
{% endif %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (let_statement
      (identifier)
      (reference_expression
        (string_literal))))
  (control_tag
    (if_statement
      (binary_expression
        (unary_expression
          (identifier))
        (string_literal))))
  (content)
  (control_tag
    (else_if_statement
      (binary_expression
        (identifier)
        (reference_expression
          (string_literal)))))
  (content)
  (control_tag
    (endif_statement))
  (content))

================================================================================
ref_and_deref_2
================================================================================

{% let x = &&"bla" %}
{% if *&**x == "bla" %}
You got it
{% endif %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (let_statement
      (identifier)
      (reference_expression
        (reference_expression
          (string_literal)))))
  (control_tag
    (if_statement
      (binary_expression
        (unary_expression
          (reference_expression
            (unary_expression
              (unary_expression
                (identifier)))))
        (string_literal))))
  (content)
  (control_tag
    (endif_statement))
  (content))

================================================================================
include
================================================================================

{% for i in iter %}
  {% include "item.html" %}
{% endfor %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (for_statement
      (identifier)
      (identifier)))
  (control_tag
    (include_statement
      (string_literal)))
  (control_tag
    (endfor_statement))
  (content))

================================================================================
expressions_1
================================================================================

{{ 3 * 4 / 2 }}
{{ 26 / 2 % 7 }}
{{ 3 % 2 * 6 }}
{{ 1 * 2 + 4 }}
{{ 11 - 15 / 3 }}
{{ (4 + 5) % 3 }}

--------------------------------------------------------------------------------

(source
  (render_expression
    (binary_expression
      (binary_expression
        (number_literal)
        (number_literal))
      (number_literal)))
  (render_expression
    (binary_expression
      (binary_expression
        (number_literal)
        (number_literal))
      (number_literal)))
  (render_expression
    (binary_expression
      (binary_expression
        (number_literal)
        (number_literal))
      (number_literal)))
  (render_expression
    (binary_expression
      (binary_expression
        (number_literal)
        (number_literal))
      (number_literal)))
  (render_expression
    (binary_expression
      (number_literal)
      (binary_expression
        (number_literal)
        (number_literal))))
  (render_expression
    (binary_expression
      (parenthesized_expression
        (binary_expression
          (number_literal)
          (number_literal)))
      (number_literal)))
  (content))

================================================================================
expressions_2
================================================================================

{% if my_bitset bitand 1 != 0 %}
    It is set!
{% endif %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (if_statement
      (binary_expression
        (binary_expression
          (identifier)
          (number_literal))
        (number_literal))))
  (content)
  (control_tag
    (endif_statement))
  (content))

================================================================================
string_concatenation
================================================================================

{{ a ~ b ~ c }}

--------------------------------------------------------------------------------

(source
  (render_expression
    (string_concatenation
      (identifier)
      (identifier)
      (identifier)))
  (content))

================================================================================
comment_1
================================================================================

{# A Comment #}

--------------------------------------------------------------------------------

(source
  (comment)
  (content))

================================================================================
comment_2
================================================================================

{#
A Comment
{# A nested comment #}
#}

--------------------------------------------------------------------------------

(source
  (comment)
  (content))

================================================================================
macros_1
================================================================================

{% macro heading(required_arg, optional_arg = "default subtitle") %}
    <h1>{{required_arg}}</h1>
    <h2>{{optional_arg}}</h2>
    {{ variable_in_scope }}
{% endmacro %}

{# Variable scope that will be passed into macro invocations #}
{% set variable_in_scope = 5 %}

{# Invoke the macro by supplying all arguments #}
{{ heading("test", "good subtitle") }}

{# Invoke the macro by leaving out the optional argument `optional_arg` #}
{# This will use the default value `default subtitle` #}
{{ heading("test") }}

--------------------------------------------------------------------------------

(source
  (control_tag
    (macro_statement
      (identifier)
      (arguments
        (identifier)
        (named_argument
          (identifier)
          (string_literal)))))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (control_tag
    (endmacro_statement))
  (comment)
  (control_tag
    (let_statement
      (identifier)
      (number_literal)))
  (comment)
  (render_expression
    (call_expression
      (identifier)
      (arguments
        (string_literal)
        (string_literal))))
  (comment)
  (comment)
  (render_expression
    (call_expression
      (identifier)
      (arguments
        (string_literal))))
  (content))

================================================================================
macros_2
================================================================================

{% macro heading(required_arg, optional_arg = "default subtitle") %}
    {# ... #}
{% endmacro heading %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (macro_statement
      (identifier)
      (arguments
        (identifier)
        (named_argument
          (identifier)
          (string_literal)))))
  (comment)
  (control_tag
    (endmacro_statement
      (identifier)))
  (content))

================================================================================
imports_and_scopes
================================================================================

{% import "macro.html" as scope %}

{{ scope::heading("test") }}

--------------------------------------------------------------------------------

(source
  (control_tag
    (import_statement
      (string_literal)
      (identifier)))
  (render_expression
    (call_expression
      (scoped_identifier
        (identifier)
        (identifier))
      (arguments
        (string_literal))))
  (content))

================================================================================
named_arguments_1
================================================================================

{% macro heading(title, font_weight = "normal", font_size = 13) %}
    <h1 style="font-weight: {{ font_weight }}; font-size: {{ font_size }};">
        {{ title }}
    </h1>
{% endmacro %}

{# using positional arguments #}
{{ heading("Super Heading", "bold", 13) }}
{# using named arguments #}
{{ heading(title = "Super Heading", font_weight = "bold") }}
{{ heading(title = "Super Heading", font_weight = "bold", font_size = 23) }}
{{ heading(title = "Super Heading", font_size = 42, font_weight = "bold") }}

--------------------------------------------------------------------------------

(source
  (control_tag
    (macro_statement
      (identifier)
      (arguments
        (identifier)
        (named_argument
          (identifier)
          (string_literal))
        (named_argument
          (identifier)
          (number_literal)))))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (endmacro_statement))
  (comment)
  (render_expression
    (call_expression
      (identifier)
      (arguments
        (string_literal)
        (string_literal)
        (number_literal))))
  (comment)
  (render_expression
    (call_expression
      (identifier)
      (arguments
        (named_argument
          (identifier)
          (string_literal))
        (named_argument
          (identifier)
          (string_literal)))))
  (render_expression
    (call_expression
      (identifier)
      (arguments
        (named_argument
          (identifier)
          (string_literal))
        (named_argument
          (identifier)
          (string_literal))
        (named_argument
          (identifier)
          (number_literal)))))
  (render_expression
    (call_expression
      (identifier)
      (arguments
        (named_argument
          (identifier)
          (string_literal))
        (named_argument
          (identifier)
          (number_literal))
        (named_argument
          (identifier)
          (string_literal)))))
  (content))

================================================================================
named_arguments_2
================================================================================

{{ heading("Super Heading", font_weight = "bold", font_size = 26) }}
{{ heading("Super Heading", font_size = 26, font_weight = "bold") }}
{{ heading("Super Heading", "bold", font_size = 26) }}

--------------------------------------------------------------------------------

(source
  (render_expression
    (call_expression
      (identifier)
      (arguments
        (string_literal)
        (named_argument
          (identifier)
          (string_literal))
        (named_argument
          (identifier)
          (number_literal)))))
  (render_expression
    (call_expression
      (identifier)
      (arguments
        (string_literal)
        (named_argument
          (identifier)
          (number_literal))
        (named_argument
          (identifier)
          (string_literal)))))
  (render_expression
    (call_expression
      (identifier)
      (arguments
        (string_literal)
        (string_literal)
        (named_argument
          (identifier)
          (number_literal)))))
  (content))

================================================================================
named_arguments_3
================================================================================

{% macro heading(arg1, arg2, arg3, arg4) %}
{% endmacro %}

{{ heading("something", "b", arg4 = "ah", arg2 = "title") }}

--------------------------------------------------------------------------------

(source
  (control_tag
    (macro_statement
      (identifier)
      (arguments
        (identifier)
        (identifier)
        (identifier)
        (identifier))))
  (control_tag
    (endmacro_statement))
  (render_expression
    (call_expression
      (identifier)
      (arguments
        (string_literal)
        (string_literal)
        (named_argument
          (identifier)
          (string_literal))
        (named_argument
          (identifier)
          (string_literal)))))
  (content))

================================================================================
named_arguments_4
================================================================================

{{ heading("something", arg3 = "b", arg4 = "ah", arg2 = "title") }}
{# Equivalent of: #}
{{ heading("something", "title", "b", arg4 = "ah") }}

--------------------------------------------------------------------------------

(source
  (render_expression
    (call_expression
      (identifier)
      (arguments
        (string_literal)
        (named_argument
          (identifier)
          (string_literal))
        (named_argument
          (identifier)
          (string_literal))
        (named_argument
          (identifier)
          (string_literal)))))
  (comment)
  (render_expression
    (call_expression
      (identifier)
      (arguments
        (string_literal)
        (string_literal)
        (string_literal)
        (named_argument
          (identifier)
          (string_literal)))))
  (content))

================================================================================
macro_call_blocks_1
================================================================================

{% macro centered() %}
    <center>
        {# insert the invocation's body here: #}
        {{ caller() }}
    <center>
{% endmacro %}

{# This macro has to use the call block syntax, because it's expecting a body: #}
{% call centered() %}
    This text will be centered
{% endcall %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (macro_statement
      (identifier)
      (arguments)))
  (content)
  (comment)
  (render_expression
    (call_expression
      (identifier)
      (arguments)))
  (content)
  (control_tag
    (endmacro_statement))
  (comment)
  (control_tag
    (macro_call_statement
      (call_expression
        (identifier)
        (arguments))))
  (content)
  (control_tag
    (endcall_statement))
  (content))

================================================================================
macro_call_blocks_2
================================================================================

{% macro render_dialog(title, class="dialog") -%}
    <div class="{{ class }}">
        <h2>{{ title }}</h2>
        <div class="contents">
            {% if caller is defined %}
                {{ caller() }}
            {% else %}
                Empty dialog without content
            {% endif %}
        </div>
    </div>
{%- endmacro %}

{# invoking it without body: no `caller` will be defined #}
{{ render_dialog("Empty Dialog") }}

{# invoking it with body: #}
{% call render_dialog("Nice Dialog") %}
    This is a simple dialog rendered by using a macro and
    a call block.
{% endcall %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (macro_statement
      (identifier)
      (arguments
        (identifier)
        (named_argument
          (identifier)
          (string_literal)))))
  (content)
  (render_expression
    (identifier))
  (content)
  (render_expression
    (identifier))
  (content)
  (control_tag
    (if_statement
      (is_defined_expression
        (identifier))))
  (render_expression
    (call_expression
      (identifier)
      (arguments)))
  (control_tag
    (else_statement))
  (content)
  (control_tag
    (endif_statement))
  (content)
  (control_tag
    (endmacro_statement))
  (comment)
  (render_expression
    (call_expression
      (identifier)
      (arguments
        (string_literal))))
  (comment)
  (control_tag
    (macro_call_statement
      (call_expression
        (identifier)
        (arguments
          (string_literal)))))
  (content)
  (control_tag
    (endcall_statement))
  (content))

================================================================================
macro_call_block_args
================================================================================

{% macro dump_users(users) -%}
    <ul>
    {%- for user in users %}
        <li><p>{{ user.username }}</p>{{ caller(user) }}</li>
    {%- endfor %}
    </ul>
{%- endmacro %}

{# This callblock declares the argument `user` for `caller`: #}
{% call(user) dump_users(list_of_users) %}
    <dl>
        <dt>Realname</dt>
        <dd>{{ user.realname }}</dd>
        <dt>Description</dt>
        <dd>{{ user.description }}</dd>
    </dl>
{% endcall %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (macro_statement
      (identifier)
      (arguments
        (identifier))))
  (content)
  (control_tag
    (for_statement
      (identifier)
      (identifier)))
  (content)
  (render_expression
    (field_expression
      (identifier)
      (field_identifier)))
  (content)
  (render_expression
    (call_expression
      (identifier)
      (arguments
        (identifier))))
  (content)
  (control_tag
    (endfor_statement))
  (content)
  (control_tag
    (endmacro_statement))
  (comment)
  (control_tag
    (macro_call_statement
      (identifier)
      (call_expression
        (identifier)
        (arguments
          (identifier)))))
  (content)
  (render_expression
    (field_expression
      (identifier)
      (field_identifier)))
  (content)
  (render_expression
    (field_expression
      (identifier)
      (field_identifier)))
  (content)
  (control_tag
    (endcall_statement))
  (content))

================================================================================
nesting_macros_with_content
================================================================================

{% macro container() %}
    <div class="container">
        {{ caller() }}
    </div>
{% endmacro %}

{% macro outer_container() %}
    {# Create an alias to our `caller`, so we can access it within container: #}
    {% set outer_caller = caller %}

    <div class="outer-container">
        {# nested macro invocation - will overwrite the `caller` variable: #}
        {% call container() %}
            {{ outer_caller() }}
        {% endcall %}
    </div>
{% endmacro %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (macro_statement
      (identifier)
      (arguments)))
  (content)
  (render_expression
    (call_expression
      (identifier)
      (arguments)))
  (content)
  (control_tag
    (endmacro_statement))
  (control_tag
    (macro_statement
      (identifier)
      (arguments)))
  (comment)
  (control_tag
    (let_statement
      (identifier)
      (identifier)))
  (content)
  (comment)
  (control_tag
    (macro_call_statement
      (call_expression
        (identifier)
        (arguments))))
  (render_expression
    (call_expression
      (identifier)
      (arguments)))
  (control_tag
    (endcall_statement))
  (content)
  (control_tag
    (endmacro_statement))
  (content))

================================================================================
calling_rust_macros_1
================================================================================

{% let s = format!("{}", 12) %}

--------------------------------------------------------------------------------

(source
  (control_tag
    (let_statement
      (identifier)
      (macro_invocation
        (identifier)
        (token_tree
          (string_literal)
          (number_literal)))))
  (content))

================================================================================
calling_rust_macros_2
================================================================================

{% let entity = entity %}
{{ test_macro!(entity) }}

--------------------------------------------------------------------------------

(source
  (control_tag
    (let_statement
      (identifier)
      (identifier)))
  (render_expression
    (macro_invocation
      (identifier)
      (token_tree
        (identifier))))
  (content))
